old collution method


collide=true;
						        	double xMatter=0;
						        	double yMatter=0;
						        	if(tLeft){
						        		xMatter=particleCollution.sx;
						        	    yMatter=particleCollution.s;
						        	}
						        	if(dLeft){
						        		xMatter=particleCollution.sx;
						        	    yMatter=particleCollution.s+particleCollution.height;
						        	}
						        	if(tRight){
						        		xMatter=particleCollution.sx+particleCollution.width;
						        	    yMatter=particleCollution.s;
						        	}
						        	if(dRight){
						        		xMatter=particleCollution.sx+particleCollution.width;
						        	    yMatter=particleCollution.s+particleCollution.height;
						        	}
						        	double particlePiviotX=(particle.sx+particle.width)/2;
						        	double particlePiviotY=(particle.s+particle.height)/2;
						        	
										boolean directionSpeed=false;
										double dueY=0;//(particle.s+particle.height)-yMatter;
										double dueX=0;//(particle.sx+particle.width)-xMatter;										
										double dueYZero=(yMatter)-particle.s;
										double dueXZero=(xMatter)-particle.sx;
										
										if((tLeft) || (dLeft && particleCollution.sx>particlePiviotX) || 
										    (tRight && particleCollution.s>particlePiviotY)){
											dueY=(particle.s+particle.height)-yMatter;
											dueX=(particle.sx+particle.width)-xMatter;
										}
										if((tRight && (particleCollution.sx+particleCollution.width)<particlePiviotX) || (dRight) || (dLeft && (particleCollution.s+particleCollution.height)<particlePiviotY)){
											dueY=(yMatter)-particle.s;
											dueX=(xMatter)-particle.sx;
										}
										
										
										double relativeSpeedX=0;
										if(particle.travelTypeRoad!=particleCollution.travelTypeRoad){
											relativeSpeedX=particle.ux+particleCollution.ux;
										}else{
											relativeSpeedX=particle.ux-particleCollution.ux;
										}
										double impactRelativePC = MotionPhyx.impactPhysx2(-1, particleCollution.m,
												relativeSpeedX, particleCollution.sh);
										
										
										double relativeSpeedY=0;
										if(particle.travelType!=particleCollution.travelType){
											relativeSpeedY=particle.u+particleCollution.u;
										}else{
											relativeSpeedY=particle.u-particleCollution.u;
										}
										double impactRelativeYPC = MotionPhyx.impactPhysx2(-1, particleCollution.m,
												relativeSpeedY, particleCollution.sh);
										
										
										
										if(particle.travelTypeRoad!=particleCollution.travelTypeRoad){
											relativeSpeedX=particleCollution.ux+particle.ux;
										}else{
											relativeSpeedX=particleCollution.ux-particle.ux;
										}
										double impactRelativeP = MotionPhyx.impactPhysx2(-1, particleCollution.m,
												relativeSpeedX, particleCollution.sh);
										
										
										
										if(particle.travelType!=particleCollution.travelType){
											relativeSpeedY=particleCollution.u+particle.u;
										}else{
											relativeSpeedY=particleCollution.u-particle.u;
										}
										double impactRelativeYP = MotionPhyx.impactPhysx2(-1, particleCollution.m,
												relativeSpeedY, particleCollution.sh);
										
										int particleTravelRoadRelative=-1;
										int particleCollutionTravelRoadRelative=-1;
										
										int particleTravelRelative=-1;
										int particleCollutionTravelRelative=-1;

										if(dueY>=dueX && dueY>=0 && dueX>=0){
											//Log.d("TTE", ""+3);
											//right collution
											
											if(((particle.sx+particle.width)/2)<xMatter){
												particleTravelRoadRelative=TRAVEL_RIGHT;
												particleCollutionTravelRoadRelative=TRAVEL_LEFT;
											}
											//left collution
											if(((particle.sx+particle.width)/2)>xMatter){
												particleTravelRoadRelative=TRAVEL_LEFT;
												particleCollutionTravelRoadRelative=TRAVEL_RIGHT;
											}
											
											if(particle.travelTypeRoad==particleTravelRoadRelative){
												directionSpeed=true;
											}else{
												directionSpeed=false;
											}
																					
											particle.ux = MotionPhyx.impactReactionPhysx(
													(impactRelativeP / 100000000), 1,
													(particle.ux * 0.99), -1, 1, directionSpeed);
											//particle.travelTypeRoad=particleTravelRoadRelative;
//											if(particle.ux>0){
//												particle.travelTypeRoad=TRAVEL_RIGHT;
//											}else{
//												particle.travelTypeRoad=TRAVEL_LEFT;
//											}
											if(particle.ux>0){
											    if(particleTravelRoadRelative==TRAVEL_RIGHT)particle.ux*=-1;
										    }else{
										    	if(particleTravelRoadRelative==TRAVEL_LEFT)particle.ux*=-1;
										    }
											
											if(particleCollution.travelTypeRoad==particleCollutionTravelRoadRelative){
												directionSpeed=true;
											}else{
												directionSpeed=false;
											}
											
//											if(particle.travelTypeRoad==particleCollution.travelTypeRoad)
//												impactRelative*=-1;
											
											particleCollution.ux = MotionPhyx.impactReactionPhysx(
													(impactRelativePC / 100000000), 1,
													(particleCollution.ux * 0.99), -1, 1, directionSpeed);
											//particleCollution.travelTypeRoad=particleCollutionTravelRoadRelative;
//											if(particleCollution.ux>0){
//												particleCollution.travelTypeRoad=TRAVEL_RIGHT;
//											}else{
//												particleCollution.travelTypeRoad=TRAVEL_LEFT;
//											}
											
											if(particleCollution.ux>0){
											    if(particleCollutionTravelRoadRelative==TRAVEL_RIGHT)particleCollution.ux*=-1;
										    }else{
										    	if(particleCollutionTravelRoadRelative==TRAVEL_LEFT)particleCollution.ux*=-1;
										    }
											
										}else if(dueY<=dueX && dueY>=0 && dueX>=0){
											//Log.d("TTE", ""+4);
											
											if(((particle.s+particle.height)/2)<yMatter){
												particleTravelRelative=TRAVEL_UP;
												particleCollutionTravelRelative=TRAVEL_DOWN;
											}
											//down collution
											if(((particle.s+particle.height)/2)>yMatter){
												particleTravelRelative=TRAVEL_DOWN;
												particleCollutionTravelRelative=TRAVEL_UP;
											}
											
											if(particle.travelType==particleTravelRelative){
												directionSpeed=true;
											}else{
												directionSpeed=false;
											}
																					
											particle.u = MotionPhyx.impactReactionPhysx(
													(impactRelativeYP / 100000000), 1,
													(particle.u * 0.99), -1, 1, directionSpeed);
											//particle.travelType=particleTravelRelative;
//											if(particle.u>0){
//												particle.travelType=TRAVEL_UP;
//											}else{
//												particle.travelType=TRAVEL_DOWN;
//											}
											 if(particle.u>0){
													if(particleTravelRelative==TRAVEL_UP)particle.u*=-1;
												}else{
													if(particleTravelRelative==TRAVEL_DOWN)particle.u*=-1;
												}
											
											if(particleCollution.travelType==particleCollutionTravelRelative){
												directionSpeed=true;
											}else{
												directionSpeed=false;
											}
											
//											if(particle.travelType==particleCollution.travelType)
//												impactRelativeY*=-1;
																					
											particleCollution.u = MotionPhyx.impactReactionPhysx(
													(impactRelativeYPC / 100000000), 1,
													(particleCollution.u * 0.99), -1, 1, directionSpeed);
											//particleCollution.travelType=particleCollutionTravelRelative;
//											if(particleCollution.u>0){
//												particleCollution.travelType=TRAVEL_UP;
//											}else{
//												particleCollution.travelType=TRAVEL_DOWN;
//											}
											
									    if(particleCollution.u>0){
											if(particleCollutionTravelRelative==TRAVEL_UP)particleCollution.u*=-1;
										}else{
											if(particleCollutionTravelRelative==TRAVEL_DOWN)particleCollution.u*=-1;
										}
											
										}
										double dueFix=0;
										if(tLeft){
											
											if(dueY>=dueX && dueY>=0 && dueX>=0){
												dueFix=(particle.sx+particle.width)-(particleCollution.sx-0);
												if(particleCollution.sx>0)
													particleCollution.sx+=dueFix;
												else
													particleCollution.sx-=dueFix;
											}
											
											if(dueY<=dueX && dueY>=0 && dueX>=0){
												dueFix=(particle.s+particle.height)-(particleCollution.s-0);
												if(particleCollution.s>0)
													particleCollution.s+=dueFix;
												else
													particleCollution.s-=dueFix;
												
											}
											//particleCollution.s=particle.s+particle.height;
										}
										else if(tRight){
											
											if(dueY>=dueX && dueY>=0 && dueX>=0){
												dueFix=(particle.sx)-(particleCollution.sx-0);
												if(particleCollution.sx>0)
													particleCollution.sx-=dueFix;
												else
													particleCollution.sx+=dueFix;
											}
											
											if(dueY<=dueX && dueY>=0 && dueX>=0){
												dueFix=(particle.s+particle.height)-(particleCollution.s-0);
												if(particleCollution.s>0)
													particleCollution.s+=dueFix;
												else
													particleCollution.s-=dueFix;
												
											}
										}
										else if(dLeft){
											
											if(dueY>=dueX && dueY>=0 && dueX>=0){
												dueFix=(particle.sx+particle.width)-(particleCollution.sx-0);
												if(particleCollution.sx>0)
													particleCollution.sx+=dueFix;
												else
													particleCollution.sx-=dueFix;
											}
											
											if(dueY<=dueX && dueY>=0 && dueX>=0){
												dueFix=((particleCollution.s+particleCollution.height)-0)-particle.s;
												if(particleCollution.s>0)
													particleCollution.s-=dueFix;
												else
													particleCollution.s+=dueFix;
												
											}
										}
										else if(dRight){
											
											if(dueY>=dueX && dueY>=0 && dueX>=0){
												dueFix=(particle.sx)-((particleCollution.sx+particleCollution.width)-0);
												if(particleCollution.sx>0)
													particleCollution.sx-=dueFix;
												else
													particleCollution.sx+=dueFix;
											}
											
											if(dueY<=dueX && dueY>=0 && dueX>=0){
												dueFix=((particleCollution.s+particleCollution.height)-0)-particle.s;
												if(particleCollution.s>0)
													particleCollution.s-=dueFix;
												else
													particleCollution.s+=dueFix;
												
											}
										}
										
										
										
										
										break;